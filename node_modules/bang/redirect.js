
"use strict"





var URL            = require('url')

var constants      = require('bang/commons/constants')
var httpStatus     = require('bang/commons/http-status')
var enginePatterns = require('bang/data/engines.json')
var logger         = require('bang/logging/logger')
var Engine         = require('bang/engine')




var withWordBoundary = word => {

	var WORD_BOUNDARY = constants.regex.WORD_BOUNDARY
	var escapedWord   = word.split('').map(char => `[${char}]`).join('')

	return new RegExp(WORD_BOUNDARY + escapedWord + WORD_BOUNDARY, 'i')

}




var queryMatchesEngine = (rawQuery, engine) => {
	return engine.patterns.some(pattern => {
		return withWordBoundary(pattern).test(rawQuery)
	})
}





var findDefaultEngine = engines => {
	return engines.filter(engine => {
		return engine.isDefault
	})[0]
}





var findMatchingEngine = rawQuery => {

	var engines         = enginePatterns.map(Engine)
	var matchingEngines = engines.filter(queryMatchesEngine.bind({ }, rawQuery))

	return matchingEngines.length > 0
		? matchingEngines[0]
		: findDefaultEngine(engines)

}





var searchTermsToUrl = (searchTerms, engine) => {

	return searchTerms.length === 0
		? engine.baseUrl
		: URL.parse(engine.searchTemplate.replace(/{searchTerms}/g, searchTerms), true).href

}





var extractSearchTerms = (rawQuery, engine) => {

	return engine.patterns.reduce((query, pattern) => {
		return query.replace(withWordBoundary(pattern), '')
	}, rawQuery)

}




var redirect = { }

redirect.toSearchEngine = (config, rawQuery, res) => {

	var matchingEngine = findMatchingEngine(rawQuery)
	var searchTerms    = extractSearchTerms(rawQuery, matchingEngine)
	var redirectUrl    = searchTermsToUrl(searchTerms, matchingEngine)

	if (config.trace) {

		logger.info({

			rawQuery,
			searchTerms,
			redirectUrl

		}, 'request redirected.')

	}

	res
	.status(httpStatus.temporaryRedirect)
	.set('Location', redirectUrl)
	.end( )

}

redirect.toHelpFile = (config, rawQuery, res) => {

	if (config.trace) {

		logger.info({

			rawQuery,
			redirectUrl: 'about'

		}, 'request redirected.')

	}
	res
	.status(httpStatus.temporaryRedirect)
	.set('Location', 'about')
	.end( )

}




module.exports = redirect
