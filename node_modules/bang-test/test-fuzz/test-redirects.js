
"use strict"




var URL        = require('url')
var expect     = require('chai').expect

var bangServer = require('bang/app/bang')
var engines    = require('bang/data/engines.json')
var constants  = require('bang-test/commons/constants')
var commons    = require('bang-test/commons/commons')
var random     = require('bang-test/commons/random')
var logger     = require('bang-test/logging/logger')




var config = {
	TESTS_PER_PATTERN: 10,
	TEST_DURATION:    1 * (60 * 1000),
}

config.SERVER_ARGS = {

	port:  constants.TEST_PORT,
	trace: false,
	fatalErrorHandler: (errors, err) => {

		logger.error({
			err
		}, 'Bang! server threw an error for a query')

		errors.push(err)

	}
}





var fuzzTest = { }



fuzzTest.searchPattern = (testsPerPattern, pattern, callback) => {

	commons.foldAsync(
		(results, _, cReturn) => {

			var url = random.bangURL.searchWithPattern(

				constants.TEST_PORT,
				constants.UPPER_PATH_LENGTH,
				constants.whitespace_UPPER_LENGTH,
				pattern

			)

			commons.callServer(url, result => {
				cReturn({
					pattern: results.pattern,
					results: results.results.concat(result)
				})
			})

		},

		new Array(testsPerPattern), callback, {pattern, results: [ ]}
	)

}

fuzzTest.searchEngine = (testsPerPattern, engine, callback) => {

	commons.foldAsync(
		(results, pattern, cReturn) => {

			fuzzTest.searchPattern(testsPerPattern, pattern, result => {
				cReturn({
					engine:  results.engine,
					results: results.results.concat(result)
				})
			})

		},

		engine.patterns, callback, {engine, results: [ ]}
	)

}

fuzzTest.searchEngines = (testsPerPattern, engines, callback) => {

	commons.foldAsync(
		(results, engine, cReturn) => {

			fuzzTest.searchEngine(testsPerPattern, engine, result => {
				cReturn(results.concat(result))
			})

		},

		engines, callback, [ ]
	)

}





describe('# server redirection', function ( ) {

	var testResults
	var testServer
	var serverErrors = [ ]

	this.timeout(config.TEST_DURATION)





	before(done => {

		config.SERVER_ARGS.fatalErrorHandler =
			config.SERVER_ARGS.fatalErrorHandler.bind({ }, serverErrors)

		bangServer(config.SERVER_ARGS, (app, server) => {

			testServer = {app, server}

			fuzzTest.searchEngines(config.TESTS_PER_PATTERN, engines, results => {

				testResults = results
				done( )

			})

		})

	})





	it('redirects without errors', done => {

		testResults.forEach( ({engine, results}) => {
			results.forEach( ({pattern, results}) => {
				results.forEach(lookupResult => {

					expect(lookupResult.err).to.be.a('null')
					expect(lookupResult.headers).to.be.an('object')
					expect(lookupResult.headers.location).to.be.a('string')

					expect(lookupResult.statusCode).to.equal(constants.status.REDIRECT)

				})
			})
		})

		done( )

	})

	it('redirects to the expected host', done => {

		testResults.forEach( ({engine, results}) => {
			results.forEach( ({pattern, results}) => {
				results.forEach(lookupResult => {

					var expected = URL.parse(engine.searchTemplate).host
					var redirect = URL.parse(lookupResult.headers.location).host

					expect(expected).to.equal(redirect)

				})
			})
		})

		done( )

	})

	after(done => {

		testServer.server.close(( ) => {
			setTimeout(done, constants.times.SERVER_CLOSE)
		})

	})

})
