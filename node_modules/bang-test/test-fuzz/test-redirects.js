
"use strict"




var URL        = require('url')
var expect     = require('chai').expect

var bangServer = require('bang/app/bang')
var engines    = require('bang/data/engines.json')
var constants  = require('bang-test/commons/constants')
var commons    = require('bang-test/commons/commons')
var random     = require('bang-test/commons/random')
var logger     = require('bang-test/logging/logger')

var fuzz       = require('bang-test/test-fuzz/fuzz')





var config = {
	TESTS_PER_PATTERN: 100,
	TEST_DURATION:     10  * (60 * 1000),
	randUrl: random.bangURL.searchWithPattern.bind({ },

		constants.TEST_PORT,
		constants.UPPER_PATH_LENGTH,
		constants.whitespace_UPPER_LENGTH

	)
}

config.SERVER_ARGS = {

	port:  constants.TEST_PORT,
	fatalErrorHandler: (errors, err) => {

		logger.error({
			err
		}, 'Bang! server threw an error for a query')

		errors.push(err)

	}
}

config.FUZZ_ARGS = {
	testsPerPattern: config.TESTS_PER_PATTERN,
	randUrl:         config.randUrl
}





var setupFuzzTest = (args, engines, callback) => {

	var state = {errors: [ ]}

	if (args.server) {
		args.server.fatalErrorHandler = args.server.fatalErrorHandler.bind({ }, state.errors)
	}

	bangServer(args.server, (app, server) => {

		state.server = {app, server}

		fuzz.searchEngines(args.fuzz, engines, results => {

			state.results = results
			callback(state)

		})

	})

}





describe('# server redirection for patterns', function ( ) {

	var state
	this.timeout(config.TEST_DURATION)

	before(done => {

		setupFuzzTest({server: config.SERVER_ARGS, fuzz: config.FUZZ_ARGS}, engines, setupResult => {
			state = setupResult
			done( )
		})

	})





	it('redirects without errors', done => {

		state.results.forEach( ({engine, pattern, result}) => {

			expect(result.err).to.be.a('null')
			expect(result.headers).to.be.an('object')
			expect(result.headers.location).to.be.a('string')

			expect(result.statusCode).to.equal(constants.status.REDIRECT)

		})

		done( )

	})

	it('redirects to the expected host', done => {

		state.results.forEach( ({engine, pattern, result}) => {

			var expected = URL.parse(engine.searchTemplate).host
			var redirect = URL.parse(result.headers.location).host

			expect(expected).to.equal(redirect)

		})

		done( )

	})

	after(done => {

		state.server.server.close(( ) => {
			setTimeout(done, constants.times.SERVER_CLOSE)
		})

	})

})
