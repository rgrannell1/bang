
"use strict"




var URL        = require('url')
var expect     = require('chai').expect
var assert     = require('assert')

var commons    = require('bang-test/commons/commons')
var constants  = require('bang-test/commons/constants')

var deploy     = require('bang-test/tests/fuzz/deploy')
var servers    = require('bang-test/tests/fuzz/server-config')




var message = "server redirect with redirect-patterns (n = " + commons.sampleSize(servers.withPatterns) + ")"





describe(message, function ( ) {

	var state
	this.timeout(servers.withPatterns.duration)

	before(done => {

		deploy.fuzz.overAllEngines(servers.withPatterns, result => {

			state = result
			done( )

		})

	})

	it('redirects without errors', done => {

		state.results.forEach( ({engine, pattern, result}) => {

			var summary = JSON.stringify({engine, pattern, result})

			expect(result.err).to.be.a('null', summary)
			expect(result.headers).to.be.an('object', summary)
			expect(result.headers.location).to.be.a('string', summary)

			expect(result.statusCode).to.equal(constants.status.REDIRECT, summary)

		})

		done( )

	})

	it('redirects to the same hostname as the expected hostname', done => {

		state.results.forEach( ({engine, pattern, result}) => {

			var summary = JSON.stringify({engine, pattern, result})

			var expected = URL.parse(engine.searchTemplate).hostname
			var redirect = URL.parse(result.headers.location).hostname

			expect(expected).to.equal(redirect, summary)

		})

		done( )

	})

	after(done => {

		state.server.server.close(( ) => {
			setTimeout(done, constants.times.SERVER_CLOSE)
		})

	})

})
