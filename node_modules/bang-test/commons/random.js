
"use strict"




var is        = require('is')
var constants = require('bang-test/commons/constants')





var random = {
	bangURL:  { },
	bangPath: { }
}




random.float = (lower, upper) => {

	random.float.precond(lower, upper)

	return Math.random( ) * (lower - upper) + upper

}

random.float.precond = (lower, upper) => {
	is.always.number(lower)
	is.always.number(upper)
}





random.integer = (lower, upper) =>{

	random.integer.precond(lower, upper)

	return Math.floor(random.float(lower, upper))

}

random.integer.precond = (lower, upper) => {
	is.always.number(lower)
	is.always.number(upper)
}





random.fromSet = (lower, upper, charset) => {

	random.fromSet.precond(lower, upper, charset)

	var out = [ ]
	var len = random.integer(lower, upper)


	for (var ith = 0; ith < len; ++ith) {
		out[ith] = charset[random.integer(0, charset.length)]
	}

	return out.join('')

}

random.fromSet.precond = (lower, upper, charset) => {

	is.always.number(lower)
	is.always.number(upper)
	is.always.string(charset)

}




random.bangPath.path = (lower, upper) => {

	random.bangPath.path.precond(lower, upper)

	return random.fromSet(lower, upper, constants.charset.base64)

}

random.bangPath.path.precond = (lower, upper) => {

	is.always.number(lower)
	is.always.number(upper)

}




random.bangPath.pathWithPattern = (path, whitespaceLength, pattern) => {

	random.bangPath.pathWithPattern.precond(path, whitespaceLength, pattern)

	var paddedPattern =
		random.whitespace(1, whitespaceLength) +
		pattern                                +
		random.whitespace(1, whitespaceLength)

	var index = random.integer(0, path.length)

	return path.substr(0, index) + paddedPattern + path.substr(index)

}

random.bangPath.pathWithPattern.precond = (path, whitespaceLength, pattern) => {

	is.always.string(path)
	is.always.number(whitespaceLength)
	is.always.string(pattern)

}





random.whitespace = (lower, upper) => {
	return random.fromSet(lower, upper, constants.charset.whitespace)
}





module.exports = random
