
"use strict"




var commons = { }
var request = require('request')
var logger  = require('bang-test/logging/logger')




commons.callServer = (url, callback) => {

	request({url, followRedirect: false, agent: false}, (err, res, body) => {

		setTimeout(callback, 0, {
			err,
			statusCode: res ? res.statusCode : null,
			url,
			headers: res && res.headers ? res.headers : null
		})

	})

}




commons.foldAsync = (fn, data, onComplete, acc) => {

	var recur = (result, data) => {

		data.length === 0
			? onComplete(result)
			: fn(result, data[0], fnResult => {
				recur(fnResult, data.slice(1))
			})

	}

	recur(acc ? acc : data[0], data)

}




commons.saveServerError = (errors, err) => {

	logger.error({
		err
	}, 'Bang! server threw an error for a query')

	errors.push(err)

}




commons.countPatterns = engines => {
	return engines.reduce((acc, engine) => {
		return acc + engine.patterns.length
	}, 0)
}




commons.sampleSize = config => {
	return config.fuzz.testsPerPattern * commons.countPatterns(config.engines)
}




commons.asBangUrl = (port, path) => {
	return 'http://localhost:' + port + '/search?q=' + path
}




commons.allPatterns = engines => {

	return engines.reduce((acc, engine) => {
		return acc.concat(engine.patterns)
	}, [ ])

}





commons.isSubstring = (str0, str1) => {

	if (str0.length === 0) {
		return true
	} else if (str1.length === 0) {
		return false
	} else {

		var index = str1.indexOf(str0.charAt(0))

		return index === -1
			? false
			: isSubstring(str0.slice(1), str1.slice(index + 1))


	}

}





module.exports = commons
